FORMAT: 1A
HOST: http://api.unityprofiles.com

# Moussaka

API Version 0.1

A web application for setting up profiles that define the behavior of your Unity3D games. It aims to provide an easy interface to allow developers to enable designers and managers to do all the tweaking and to be able to share different settings between them.
The Github repository is hosted at [https://github.com/NoxHarmonium/Moussaka](https://github.com/NoxHarmonium/Moussaka)


# Group User API
User-related resources of *Moussaka*.

## User [/users/{username}]
A single User object. The User resource allows a user of the system to authenticate themselves and belong to projects.

The User resource has the following attributes:

- username
- password (hidden)
- apiKey
- firstName
- lastName

The attribute *apiKey* is generated by the system.

+ Parameters
    + username (string) ... The username of the user (their email).

+ Model (application/json)

    Basic information of the user. Includes a user's API key which is used for connecting devices to the system.

    + Body

            {
                "username": "example@example.com",
                "apiKey": "123e4567-e89b-12d3-a456-426655440000",
                "firstName": "John",
                "lastName": "Smith"
            }

### Retrieve a Single User [GET]
+ Response 200

    [User][]

### Add a User [PUT]

+ Request (application/json)

        {
            "firstName": "John",
            "lastName": "Smith",
            "password": "pa$$word"
        }

+ Response 201

### Delete a User [DELETE]
+ Response 200


## Password [/users/{username}/password]
The Password resource represents actions a user can perform relating to their password.

+ Parameters
    + username (string) ... The username of the user (their email).


### Change a Password [POST]
Change the users *Password* using a previously known password or using a temporary code generated by *ResetPassword*.

+ Request (application/json)

        {
            "newPassword": "newPa$$"
            // Either oldPassword or tempPassword code
            // but not both
            "oldPassword": "pa$$word",
            "tempPasswordCode": "aAxmdf4",
        }

+ Response 200


## ResetPassword [/users/{username}/resetPassword]
The ResetPassword resource represents actions a user can perform to get a password code emailed to them which can be used to change their *Password* if forgotton.


+ Parameters
    + username (string) ... The username of the user (their email).


### Change a Password [POST]
Email the user a tempPasswordCode that can be used to change thier *Password*

+ Response 200


## Login [/users/login]
Authenticates a user with their username (email) and password. Returns a cookie that start a persistant authenticated session in a browser.


### Perform a Login [POST]
Perform authentication

+ Request (application/json)

        {
            "username": "example@example.com",
            "password": "newPa$$"
        }

+ Response 200

## Logout [/users/logout]
Returns a cookie that ends a persistant authenticated session in a browser.


### Perform a Login [POST]
End session

+ Response 200











# Group Project API
Project-related resources of *Moussaka*.




## Project [/projects/{projectId}]
A single Project object. The Project resource groups together users into a singular unit and relates to a Unity project they are working on.

The Project resource has the following attributes:

- _id
- name
- description
- admins
- users

Admins are allowed to modify the admins/users list and delete and modify the project. Users are only allowed to connect to a *Device* and create a *Profile*.

The attribute *_id* is generated by the system.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).

+ Model (application/json)

    A basic description of a project.

    + Body

            {
                "name": "Some Unity Project",
                "description": "A project where stuff happens",
                "admins": ["bossman@example.com"],
                "users": ["underlingA@email.com", "noone@gmail.com"]
            }

### Get a Project [GET]

Gets an existing *Project*.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the specified *Project*.

+ Response 200

    [Project][]


### Update a Project [POST]

Updates an existing *Project*.

This action can only be performed if the authenticated user is a *ProjectAdmin* of the specified *Project*.

+ Request (application/json)

        {
            "name": "New Name",
            "description": "New description"
        }

+ Response 200


### Delete a Project [DELETE]

Deletes an existing *Project*.

This action can only be performed if the authenticated user is a *ProjectAdmin* of the specified *Project*.

+ Response 200


## Projects [/projects{?minRecord}{?maxRecord}{?sortField}{?sortDir}]
Represents all *Project* objects the currently authenticated *User* is able to see (is a *ProjectUser* or *ProjectAdmin* of the *Project*).
Also allows the *User* to create a new *Project*.
This resource will never return more than the maximum record count set in the server config (default: 20).

Can be paginated with the minRecord and maxRecord query parameters. For example if 100 *Project* objects are returned by the query and
you want to see page 2 with a page size of 20 set minRecord to 20 and maxRecord to 39.

+ Parameters
    + minRecord (optional, number) ... The lower bound of record count. (For pagination)
    + maxRecord (optional, number) ... The upper bound of record count. (For pagination)
    + sortField (optional, string) ... The database field to sort on.
    + sortDir   (optional, string) ... The sorting direction. Can be 'asc' for ascending or 'desc' for descending.

+ Model (application/json)

    A basic description of a project.

    + Body

            {
                "name": "Some Unity Project",
                "description": "A project where stuff happens",
                "admins": ["bossman@example.com"],
                "users": ["underlingA@email.com", "noone@gmail.com"]
            }

### Get a list of Project [GET]

Gets a list of existing *Project* paginated with minRecord and maxRecord query variables and sorted by the sortField and sortDir query variables.

+ Response 200

    [Project][]

### Create a new Project [PUT]

Create a new project with the current user as an administrator.

+ Request (application/json)

        {
            "name": "Duke Nukem 3D",
            "description": "A game where you shoot things"
        }

+ Response 201

## ProjectUser [/projects/{projectId}/users/{username}]
This resource allows a *ProjectUser* to be added or removed from a *Project*.
A ProjectUser is part of project but is only allowed to connect to devices and create a *Profile*.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + username (string) ... The username of the user (their email).


### Add a ProjectUser [PUT]

Adds a *ProjectUser* to a project.

This action can only be performed if the authenticated user is a *ProjectAdmin* of the specified *Project*.

+ Response 200


### Remove a ProjectUser [DELETE]

Removes a *ProjectUser* from a project.

This action can only be performed if the authenticated user is a *ProjectAdmin* of the specified *Project*.

+ Response 200


## ProjectAdmin [/projects/{projectId}/admins/{username}]
This resource allows a *ProjectAdmin* to be added or removed from a *Project*.
A ProjectAdmin is allowed to modify the admins/users list and delete and modify the project in addition to the privilages of a *ProjectUser*.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + username (string) ... The username of the user (their email).


### Add a ProjectAdmin [PUT]

Adds a *ProjectAdmin* to a project.

This action can only be performed if the authenticated user is a *ProjectAdmin* of the specified *Project*.

+ Response 200


### Remove a ProjectAdmin [DELETE]

Remove a *ProjectAdmin* from a project.

This action can only be performed if the authenticated user is a *ProjectAdmin* of the specified *Project*.

+ Response 200


## Profile [/projects/{projectId}/profile/{profileId}]
This resource represents a single *Profile*. A *Profile* represents the saved state of a device at a specific point in a *Session*.

The *Profile* resource has the following attributes:

- _id
- projectId
- projectVersion
- profileName
- profileData
- timestamp
- owner

The attribute *_id* is generated by the system.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + profileId (string) ... The unique identifier of the profile (_id).

+ Model (application/json)

    A basic description of a profile.

    + Body

            {
                "projectId": "848484848484848484959595",
                "projectVersion": "0.2",
                "profileName": "An example profile",
                "profileData": {
                    'a': {
                        'x' :4
                    }
                },
                "timestamp" : "2012-04-23T18:25:43.511Z",
                "owner" : "somebody@example.com"
            }

### Get a Profile [GET]

Gets an existing *Profile*.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project*.

+ Response 200

    [Profile][]

### Delete a Profile [DELETE]

Deletes an existing *Profile*.

This action can only be performed if the authenticated user is a *ProjectAdmin* of the related *Project* or the owner of the profile.

+ Response 200

## Profiles [/projects/{projectId}/profiles{?deviceId}{?minRecord}{?maxRecord}{?sortField}{?sortDir}]
Represents all *Profile* objects the currently authenticated *User* is able to see (is a *ProjectUser* or *ProjectAdmin* of the *Project* related to the *Profile*).

This resource will never return more than the maximum record count set in the server config (default: 20).

Can be paginated with the minRecord and maxRecord query parameters. For example if 100 *Profile* objects are returned by the query and
you want to see page 2 with a page size of 20 set minRecord to 20 and maxRecord to 39.

Also allows a *User* to create a new *Profile*.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceId  (string) ... The unique identifier of a device from which the state will be captured when a profile is created.
    + minRecord (optional, number) ... The lower bound of record count. (For pagination)
    + maxRecord (optional, number) ... The upper bound of record count. (For pagination)
    + sortField (optional, string) ... The database field to sort on.
    + sortDir   (optional, string) ... The sorting direction. Can be 'asc' for ascending or 'desc' for descending.

+ Model (application/json)

   A basic description of a profile.

    + Body

            {
                "projectId": "848484848484848484959595",
                "projectVersion": "0.2",
                "profileName": "An example profile",
                "profileData": {
                    'a': {
                        'x' :4
                    }
                },
                "timestamp" : "2012-04-23T18:25:43.511Z",
                "owner" : "somebody@example.com"
            }

### Get a list of Profile [GET]

Gets a list of existing *Profile* objects paginated with minRecord and maxRecord query variables and sorted by the sortField and sortDir query variables.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project*.

+ Response 200

    [Profile][]

### Add a new Profile [PUT]

Create a new *Profile* with the current state of the specified *Device*.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project*.

+ Request (application/json)

        {
            "profileName": "Some new profile"
        }

+ Response 201


# Group Device API
Device-related resources of *Moussaka*.

## Device [/projects/{projectId}/devices/{deviceMacAddr}]
The *Device* resource represents a device currently connected to the API.

The Device resource has the following attributes:

- _id
- projectId
- projectVersion
- macAddress
- deviceName
- dataSchema
- currentState
- sessionUser
- timestamp
- lastAccess

The attribute *_id* is generated by the system.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device.

+ Model (application/json)

    A basic description of a *Device*.

    + Body

            {
              projectId: '000000999999888888777777',
              projectVersion: '0.3',
              deviceName: 'Jeff\'s iPad',
              macAddress: '3D:F2:C9:A6:B3:4F',
              dataSchema: {
                'titleColor': {
                  type: 'color'
                },
                'rotateSpeed': {
                  type: 'float',
                  min: 0,
                  max: 100
                },
                'objectPosition': {
                  type: 'position',
                  lockedValues: {
                    x: false,
                    y: false,
                    z: true
                  }
                }
              },
              currentState: {
                'titleColor': {
                  values: {
                    r: 255,
                    g: 50,
                    b: 0,
                    a: 0
                  }
                },
                'rotateSpeed': {
                  values: {
                    n: 3
                  }
                },
                'objectPosition': {
                  values: {
                    x: 10,
                    y: 20,
                    z: 30
                  }
                },
                sessionUser: "somebody@gmailcom",
                timestamp: "2012-04-23T18:25:43.511Z",
                lastAccess: "2012-04-23T18:25:43.511Z"
              }
            }

### Register a device [PUT]

Registers (connects) a *Device*.

+ Response 200

    [Device][]

### Register a device [DELETE]

Deregisters (disconnnects) a *Device*.

+ Response 200

### Get a device [GET]

Gets information on the specified device. The currentState and dataSchema attributes can be accessed seperatly through the *State* and *Schema* resources respectively.

+ Response 200

            {
              projectId: '000000999999888888777777',
              projectVersion: '0.3',
              deviceName: 'Jeff\'s iPad',
              macAddress: '3D:F2:C9:A6:B3:4F',
              sessionUser: "somebody@gmailcom",
              timestamp: "2012-04-23T18:25:43.511Z",
              lastAccess: "2012-04-23T18:25:43.511Z"
            }


## Devices [/projects/{projectId}/devices{?minRecord}{?maxRecord}{?sortField}{?sortDir}]
Represents all *Device* objects the currently authenticated *User* is able to see (is a *ProjectUser* or *ProjectAdmin* of the *Project* related to the *Device*).


This resource will never return more than the maximum record count set in the server config (default: 20).

Can be paginated with the minRecord and maxRecord query parameters. For example if 100 *Device* objects are returned by the query and
you want to see page 2 with a page size of 20 set minRecord to 20 and maxRecord to 39.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + minRecord (optional, number) ... The lower bound of record count. (For pagination)
    + maxRecord (optional, number) ... The upper bound of record count. (For pagination)
    + sortField (optional, string) ... The database field to sort on.
    + sortDir   (optional, string) ... The sorting direction. Can be 'asc' for ascending or 'desc' for descending.

+ Model (application/json)

   A basic description of a *Device*.

    + Body

            {
              projectId: '000000999999888888777777',
              projectVersion: '0.3',
              deviceName: 'Jeff\'s iPad',
              macAddress: '3D:F2:C9:A6:B3:4F',
              dataSchema: {
                'titleColor': {
                  type: 'color'
                },
                'rotateSpeed': {
                  type: 'float',
                  min: 0,
                  max: 100
                },
                'objectPosition': {
                  type: 'position',
                  lockedValues: {
                    x: false,
                    y: false,
                    z: true
                  }
                }
              },
              currentState: {
            }

### Get a list of Device [GET]

Gets a list of existing *Device* paginated with minRecord and maxRecord query variables and sorted by the sortField and sortDir query variables.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project*.

+ Response 200

    [Device][]


## Schema [/projects/{projectId}/devices/{deviceMacAddr}/schema]
A single Schema object. A schema is the *dataSchema* attribute of a device.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device.

+ Model (application/json)

    A basic description of a *Device* *Schema*.

    + Body

             {
                'titleColor': {
                  type: 'color'
                },
                'rotateSpeed': {
                  type: 'float',
                  min: 0,
                  max: 100
                },
                'objectPosition': {
                  type: 'position',
                  lockedValues: {
                    x: false,
                    y: false,
                    z: true
                  }
                }
              }

### Get a schema [GET]

Gets the *Schema* of a *Device*.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project*.

+ Response 200

    [Schema][]

## State [/projects/{projectId}/devices/{deviceMacAddr}/state]
A single State object. A state is the *currentState* attribute of a device.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device.

+ Model (application/json)

    A basic description of a *Device* *State*.

    + Body

              {
                'titleColor': {
                  values: {
                    r: 255,
                    g: 50,
                    b: 0,
                    a: 0
                  }
                },
                'rotateSpeed': {
                  values: {
                    n: 3
                  }
                },
                'objectPosition': {
                  values: {
                    x: 10,
                    y: 20,
                    z: 30
                  }
                }
              }

### Get a schema [GET]

Gets the *State* of a *Device*.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project*.

+ Response 200

    [Schema][]



## Session [/projects/{projectId}/sessions/{deviceMacAddr}]
This resource is used to start and stop sessions with devices. A session reserves a device for a particular user to avoid conflicts. No actual data is exchanged apart from the URL parameters and status codes.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device you want to start a session with.


### Start a session [PUT]

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project*.

Starts a new *Session*.

+ Response 200


### End a session [DELETE]

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project*.

Ends a *Session*

+ Response 200

## Update [/projects/{projectId}/sessions/{deviceMacAddr}/updates]
The *Update* resource allows the *User* with the current *Session* with the *Device* to manipulate the current state of the device.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device of whos state you want to manipulate.


### Post an Update [PUT]

Adds an *Update* to the queue to be received by the device.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project* and the current *sessionUser* of the device.

+ Request (application/json)

        {
          'objectPosition': {
            // Schema not needed, only values
            //type: 'float',
            //min: 0,
            //max: 100,
            values: {
              x: 1,
              y: 2,
              z: 3
            }
          }
        }

+ Response 200


### Get pending Update objects [GET]

Gets an object that represents a collation of all the *Update* objects for the device in the order they were received. Clears out the update queue.

This action can only be performed if the authenticated user is a *ProjectAdmin* or *ProjectUser* of the related *Project* and the current *sessionUser* of the device.

+ Response 200

        {
          'objectPosition': {
            // Schema not needed, only values
            //type: 'float',
            //min: 0,
            //max: 100,
            values: {
              x: 1,
              y: 2,
              z: 3
            }
          },
          'titleColor': {
            //type: 'Color',
            values: {
              r: 255,
              g: 50,
              b: 55,
              a: 99
            }
          }
        }








