FORMAT: 1A
HOST: http://api.unityprofiles.com

# Unity-Profiles

API Version 0.1

A web application for setting up profiles that define the behavior of your Unity3D games. It aims to provide an easy interface to allow developers to enable designers and managers to do all the tweaking and to be able to share different settings between them.
The Github repository is hosted at [https://github.com/NoxHarmonium/unity-profiles](https://github.com/NoxHarmonium/unity-profiles)


# Group User API
User-related resources of *Unity-Profiles*.

## User [/users/{username}]
A single User object. The User resource allows a user of the system to authenticate and belong to projects.

The User resource has the following attributes:

- username
- password (hidden)
- apiKey

The attribute *apiKey* is generated by the system.

+ Parameters
    + username (string) ... The username of the user (their email).

+ Model (application/json)

    Basic information of the user. Includes a user's API key which is used for connecting devices to the system.

    + Body

            {
                "username": "example@example.com",
                "apiKey": "123e4567-e89b-12d3-a456-426655440000"
            }

### Retrieve a Single User [GET]
+ Response 200

    [User][]

### Add a User [PUT]

+ Request (application/json)

        {
            "password": "pa$$word"
        }

+ Response 201

### Delete a User [DELETE]
+ Response 200


## Password [/users/{username}/password]
Password resources represents actions a user can perform relating to their password.


+ Parameters
    + username (string) ... The username of the user (their email).


### Change a Password [POST]
Change the users *Password* using a previously known password or using a temporary code generated by *ResetPassword*.

+ Request (application/json)

        {
            "oldPassword": "pa$$word",
            "newPassword": "newPa$$"
            "tempPasswordCode": "aAxmdf4",
        }

+ Response 200 


## Password [/users/{username}/resetPassword]
The ResetPassword resource represents actions a user can perform to get a password code emailed to them which can be used to change their *Password* if forgotton.


+ Parameters
    + username (string) ... The username of the user (their email).


### Change a Password [POST]
Email the user a code that can be used to change thier *Password*

+ Response 200 


## Login [/users/login]
Authenticates a user with their username (email) and password. Returns a cookie that start a persistant authenticated session in a browser.


### Perform a Login [POST]
Perform authentication

+ Request (application/json)

        {
            "username": "example@example.com",
            "password": "newPa$$"
        }

+ Response 200 

## Logout [/users/logout]
Returns a cookie that ends a persistant authenticated session in a browser.


### Perform a Login [POST]
End session

+ Response 200 











# Group Project API
Project-related resources of *Unity-Profiles*.




## Project [/projects/{projectId}]
A single Project object. The Project resource groups together users into a singular unit.

The Project resource has the following attributes:

- _id
- name
- description
- admins
- users

Admins are allowed to modify the admins/users list and delete and modify the project. Users are only allowed to connect to devices and create a *Profile*.

The attribute *_id* is generated by the system.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    
+ Model (application/json)

    A basic description of a project.

    + Body

            {
                "name": "Duke Nukem 3D",
                "description": "A game where you shoot things",
                "admins": ["bossman@example.com"],
                "users": ["underlingA@email.com", "noone@gmail.com"]
            }

### Get a Project [GET]

Gets an existing *Project*.

+ Response 200

    [Project][]

### Delete a Project [DELETE]

Deletes an existing *Project*.

+ Response 200


## Projects [/projects{?minRecord}{?maxRecord}]
Represents all Project objects the current user is able to see. 

+ Parameters
    + minRecord (optional, number) ... The lower bound of record count. (For pagination)
    + maxRecord (optional, number) ... The upper bound of record count. (For pagination)

+ Model (application/json)

    A basic description of a project.

    + Body

            {
                "name": "Duke Nukem 3D",
                "description": "A game where you shoot things",
                "admins": ["bossman@example.com"],
                "users": ["underlingA@email.com", "noone@gmail.com"]
            }

### Get a list of Project [GET]

Gets a list of existing *Project* paginated with minRecord and maxRecord query variables.

+ Response 200

    [Project][]

### Create a new Project [PUT]

Create a new project with the current user as an administrator.

+ Request (application/json)

        {
            "name": "Duke Nukem 3D",
            "description": "A game where you shoot things"
        }

+ Response 201

## ProjectUser [/projects/{projectId}/users/{username}]
A ProjectUser is part of project but is only allowed to connect to devices and create a *Profile*.


+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + username (string) ... The username of the user (their email).
    

### Add a ProjectUser [PUT]

Adds a user to a project.

+ Response 200


### Remove a ProjectUser [DELETE]

Remove a user from a project.

+ Response 200


## ProjectAdmin [/projects/{projectId}/admins/{username}]
A ProjectAdmin is allowed to modify the admins/users list and delete and modify the project.


+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + username (string) ... The username of the user (their email).
    

### Add a ProjectUser [PUT]

Adds a user to a project.

+ Response 200


### Remove a ProjectUser [DELETE]

Remove a user from a project.

+ Response 200


## Profile [/projects/{projectId}/profile/{profileId}]
A single Profile object. A profile is the saved state of a device configuration.

The Project resource has the following attributes:

- _id
- projectId
- projectVersion
- profileName
- profileData
- timestamp
- owner

The attribute *_id* is generated by the system.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + profileId (string) ... The unique identifier of the profile (_id).
    
+ Model (application/json)

    A basic description of a profile.

    + Body

            {
                "projectId": "848484848484848484959595",
                "projectVersion": "0.2",
                "profileName": "An example profile",
                "profileData": {
                    'a': {
                        'x' :4 
                    }
                },
                "timestamp" : "2012-04-23T18:25:43.511Z",
                "owner" : "somebody@example.com"
            }

### Get a Profile [GET]

Gets an existing *Profile*.

+ Response 200

    [Profile][]

### Delete a Profile [DELETE]

Deletes an existing *Profile*.

+ Response 200

## Profiles [/projects/{projectId}/profiles{?deviceId}{?minRecord}{?maxRecord}]
Represents all *Profile* objects the current user is able to see. 

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceId  (string) ... The unique identifier of a device from which the state will be captured when a profile is created.
    + minRecord (optional, number) ... The lower bound of record count. (For pagination)
    + maxRecord (optional, number) ... The upper bound of record count. (For pagination)

+ Model (application/json)

   A basic description of a profile.

    + Body

            {
                "projectId": "848484848484848484959595",
                "projectVersion": "0.2",
                "profileName": "An example profile",
                "profileData": {
                    'a': {
                        'x' :4 
                    }
                },
                "timestamp" : "2012-04-23T18:25:43.511Z",
                "owner" : "somebody@example.com"
            }

### Get a list of Profile [GET]

Gets a list of existing *Profile* paginated with minRecord and maxRecord query variables.

+ Response 200

    [Profile][]

### Add a new Profile [PUT]

Create a new *Profile* with the current state of the specified *Device*.

+ Request (application/json)

        {
            "profileName": "Some new profile"
        }

+ Response 201


# Group Device API
Device-related resources of *Unity-Profiles*.

## Device [/projects/{projectId}/devices/{deviceMacAddr}]
A single Device object. A device object represents a device currently connected to the API.

The Device resource has the following attributes:

- _id
- projectId
- projectVersion
- macAddress
- deviceName
- dataSchema
- currentState
- sessionUser
- timestamp
- lastAccess

The attribute *_id* is generated by the system.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device.
    
+ Model (application/json)

    A basic description of a *Device*.

    + Body

            {
              projectId: '000000999999888888777777',
              projectVersion: '0.3',
              deviceName: 'Jeff\'s iPad',
              macAddress: '3D:F2:C9:A6:B3:4F',
              dataSchema: {
                'titleColor': {
                  type: 'color'
                },
                'rotateSpeed': {
                  type: 'float',
                  min: 0,
                  max: 100
                },
                'objectPosition': {
                  type: 'position',
                  lockedValues: {
                    x: false,
                    y: false,
                    z: true
                  }
                }
              },
              currentState: {
                'titleColor': {
                  values: {
                    r: 255,
                    g: 50,
                    b: 0,
                    a: 0
                  }
                },
                'rotateSpeed': {
                  values: {
                    n: 3
                  }
                },
                'objectPosition': {
                  values: {
                    x: 10,
                    y: 20,
                    z: 30
                  }
                }
              }
            }

### Register a device [PUT]

Registers (connects) a *Device*.

+ Response 200

    [Device][]
    
### Register a device [DELETE]

Deregisters (disconnnects) a *Device*.

+ Response 200

### Get a device [GET]

Gets the current state of the device.

+ Response 200

            {
              projectId: '000000999999888888777777',
              projectVersion: '0.3',
              deviceName: 'Jeff\'s iPad',
              macAddress: '3D:F2:C9:A6:B3:4F',
              dataSchema: {
                'titleColor': {
                  type: 'color'
                },
                'rotateSpeed': {
                  type: 'float',
                  min: 0,
                  max: 100
                },
                'objectPosition': {
                  type: 'position',
                  lockedValues: {
                    x: false,
                    y: false,
                    z: true
                  }
                }
              },
              currentState: {
                'titleColor': {
                  values: {
                    r: 255,
                    g: 50,
                    b: 0,
                    a: 0
                  }
                },
                'rotateSpeed': {
                  values: {
                    n: 3
                  }
                },
                'objectPosition': {
                  values: {
                    x: 10,
                    y: 20,
                    z: 30
                  }
                }
              }
            }
            
    
## Devices [/projects/{projectId}/devices{?minRecord}{?maxRecord}]
Represents all *Device* objects the current user is able to see. 

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + minRecord (optional, number) ... The lower bound of record count. (For pagination)
    + maxRecord (optional, number) ... The upper bound of record count. (For pagination)

+ Model (application/json)

   A basic description of a *Device*.

    + Body

            {
              projectId: '000000999999888888777777',
              projectVersion: '0.3',
              deviceName: 'Jeff\'s iPad',
              macAddress: '3D:F2:C9:A6:B3:4F',
              dataSchema: {
                'titleColor': {
                  type: 'color'
                },
                'rotateSpeed': {
                  type: 'float',
                  min: 0,
                  max: 100
                },
                'objectPosition': {
                  type: 'position',
                  lockedValues: {
                    x: false,
                    y: false,
                    z: true
                  }
                }
              },
              currentState: {
                'titleColor': {
                  values: {
                    r: 255,
                    g: 50,
                    b: 0,
                    a: 0
                  }
                },
                'rotateSpeed': {
                  values: {
                    n: 3
                  }
                },
                'objectPosition': {
                  values: {
                    x: 10,
                    y: 20,
                    z: 30
                  }
                }
              }
            }

### Get a list of Device [GET]

Gets a list of existing *Device* paginated with minRecord and maxRecord query variables.

+ Response 200

    [Device][]
    

## Schema [/projects/{projectId}/devices/{deviceMacAddr}/schema]
A single Schema object. A schema is the *dataSchema* attribute of a device.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device.
    
+ Model (application/json)

    A basic description of a *Device* *Schema*.

    + Body

             {
                'titleColor': {
                  type: 'color'
                },
                'rotateSpeed': {
                  type: 'float',
                  min: 0,
                  max: 100
                },
                'objectPosition': {
                  type: 'position',
                  lockedValues: {
                    x: false,
                    y: false,
                    z: true
                  }
                }
              }
              
### Get a schema [GET]

Gets the *Schema* of a *Device*.

+ Response 200

    [Schema][]
    

    
    
## Session [/projects/{projectId}/sessions/{deviceMacAddr}]
A single Session object. This resource is used to start and stop sessions with devices. A session reserves a device for a particular user to avoid conflicts. No actual data is exchanged apart from the URL parameters and status codes.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device you want to start a session with.
    

### Start a session [PUT]

Starts a new *Session*.

+ Response 200

    
### End a session [DELETE]

Ends a *Session*

+ Response 200

## Update [/projects/{projectId}/sessions/{deviceMacAddr}/updates]
The *Update* resource allows the *User* with the current *Session* of the *Device* to manipulate the current state of the device.

+ Parameters
    + projectId (string) ... The unique identifier of the project (_id).
    + deviceMacAddr (string) ... The MAC address of the connected device of whos state you want to manipulate.
    

### Post an Update [PUT]

Adds an *Update* to the queue to be received by the device.

+ Request (application/json)
        
        {
          'objectPosition': {
            // Schema not needed, only values
            //type: 'float',
            //min: 0,
            //max: 100,
            values: {
              x: 1,
              y: 2,
              z: 3
            }
          }
        }

+ Response 200

    
### Get pending Update objects [GET]

Gets all the pending *Update* objects for the device in the order they were received. Clears out the update queue.

+ Response 200

        [{
          'objectPosition': {
            // Schema not needed, only values
            //type: 'float',
            //min: 0,
            //max: 100,
            values: {
              x: 1,
              y: 2,
              z: 3
            }
          }
        }, {
          'titleColor': {
            //type: 'Color',
            values: {
              r: 255,
              g: 50,
              b: 55,
              a: 99
            }
          }
        }, {
          'objectPosition': {
            // Schema not needed, only values
            //type: 'float',
            //min: 0,
            //max: 100,
            values: {
              x: 3,
              y: 2,
              z: 1
            }
          }
        }]





    

    
